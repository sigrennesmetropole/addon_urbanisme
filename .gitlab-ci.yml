# Pipeline variables
variables:
  MAVEN_CLI_OPTS: "-s .m2/settings.xml -Dmaven.repo.local=.m2/repository --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  GIT_SUBMODULE_STRATEGY: recursive
  NODE_OPTIONS: "--max-old-space-size=8192"
  DOCKER_DISABLE: "true"  
  DOCKER_EXCLUDE_DIRS: "src/docker/cadastrapp"
  
# Cache policy - Share target folders between jobs - Note that key is related to a commit and is purged automatically after pipeline execution
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - $CI_PROJECT_DIR/.m2/repository/**/*
    - $CI_PROJECT_DIR/**/target/**/*

include:
  - project: 'boost/template-ci/pipelines/common'
    file: 'docker/docker-template.yml'
  - project: 'boost/template-ci/pipelines/common'
    file: 'securite/oss-index/oss-index-template.yml'
  - project: 'bots/trivy-script'
    file: '/trivy-template-job.yml'

default:
  image: maven:3.9.9-eclipse-temurin-17
  before_script:
    - apt update && apt install -y gettext-base build-essential
    - envsubst '${MVN_GROUP} ${MVN_RELEASE} ${MVN_SNAPSHOTS}' < pom.xml > pom.subst && mv -f pom.subst pom.xml

# Stages definition
stages:
  - build
  - test
  - sast
  - pre_docker
  - docker
  - deploy

# Build job with maven plugin execution policies define in parent pom
.urb:build:
  script:
    - mvn $MAVEN_CLI_OPTS -U clean package ${OPTS} -Pprod
  stage: build
  artifacts:
    paths:
      - $CI_PROJECT_DIR//target/urbanisme*.war
      - $CI_PROJECT_DIR//target/urbanisme*.zip
 
urb:build:
  extends: .urb:build
  except:
    refs:
      - master
      - open/master
      - /.*karbonification.*/
  tags: 
   - iaas
      
urb:build:master:
  extends: .urb:build
  only:
    refs:
      - master
      - open/master   
  variables:
    OPTS: "-DskipTests"  

# Sonar code quality analysis - note a full test coverage report through a jacoco.exec merged file in base project folder
.urb:sonar:
  stage: test
  allow_failure: true
  script:
    - >
      mvn $MAVEN_CLI_OPTS -U compile sonar:sonar
      -Dsonar.host.url=$SONAR_URL
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA
      -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
      -Dsonar.gitlab.project_id=$CI_PROJECT_ID
      ${BRANCH}

urb:sonar:
  extends: .urb:sonar
  dependencies:
    - urb:build
  except:
    refs:
      - master
      - open/master
  variables:
    BRANCH: -Dsonar.branch.name=$CI_COMMIT_REF_NAME
            

# On master, do not use branch parameter
urb:sonar:master:
  extends: .urb:sonar
  dependencies:
    - urb:build:master
  only:
    refs:
      - master
      - open/master

pre_docker:
  stage: pre_docker
  only:
    refs:
      - master
      - open/master
      - open/develop
      - /^release.*/
      - /.*karbonification.*/

  script:
    - ls $CI_PROJECT_DIR/target/
    - cp $CI_PROJECT_DIR/target/urbanisme.*ar $CI_PROJECT_DIR/src/docker/urbanisme
    - cp $CI_PROJECT_DIR/target/urbanisme-addon.zip $CI_PROJECT_DIR/src/docker/mapfishapp
  artifacts:
    paths:
      - $CI_PROJECT_DIR//target/urbanisme*.war
      - $CI_PROJECT_DIR//target/urbanisme*.zip
      - $CI_PROJECT_DIR//target/urbanisme*.jar
      - '$CI_PROJECT_DIR/src/docker/**/**.war'
      - '$CI_PROJECT_DIR/src/docker/**/**.zip'
      - '$CI_PROJECT_DIR/src/docker/**/**.jar'	  

docker2:build:
  extends: ['.docker:build']
  needs:
    - pre_docker
  dependencies:
    - pre_docker
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /.*develop/ || $CI_COMMIT_BRANCH =~ /.*master/ || $CI_COMMIT_BRANCH =~ /^release.*/ || $CI_COMMIT_BRANCH =~ /.*karbonification.*/'
  timeout: 1h
  artifacts:
    paths:
      - '$CI_PROJECT_DIR/target/**.war'
      - '$CI_PROJECT_DIR/target/**.zip'
      - '$CI_PROJECT_DIR/target/**.jar'
      - '$CI_PROJECT_DIR/src/docker/**/**.war'
      - '$CI_PROJECT_DIR/src/docker/**/**.zip'
      - '$CI_PROJECT_DIR/src/docker/**/**.jar'

.urb:deploy:
  stage: deploy
  image: glregistry.boost.open.global/boost/docker/mvn-node-jdk11-ansible:latest
  cache: {}
  tags:
    - iaas
  before_script:
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$ansible_private_key" | base64 -d)
  script:
    - ls $CI_PROJECT_DIR/target/
    - find $CI_PROJECT_DIR/target/ -name "urbanisme*.war" -exec cp {} $CI_PROJECT_DIR/ansible/dockerize/files/addon_urbanisme.war \;
    - find $CI_PROJECT_DIR/target/ -name "urbanisme*.zip" -exec cp {} $CI_PROJECT_DIR/ansible/dockerize/files/addon_urbanisme.zip \;
    - cd $CI_PROJECT_DIR/ansible
    - cp ${ANSIBLE_VAR_FILE} $HOME/addon_urbanisme_var.yml
    - ansible-playbook addon_urbanisme-docker.yml -v -i "${SERVER}," -u root --ssh-common-args=-oStrictHostKeyChecking=no*
  when: manual
  
urb:deploy:
  extends: .urb:deploy
  dependencies:
    - urb:build
  only:
    refs:
      - open/develop
  variables:
    SERVER: "REN1VML0096"
    ANSIBLE_VAR_FILE: addon_urbanisme_dev_var.yml

urb:deploy:master:
  extends: .urb:deploy
  dependencies:
    - urb:build:master
  only:
    refs:
      - open/master
  variables:
    SERVER: "REN1VML0095"

## #####
# DÃ©ploiement Karbon
.urb:deploy-karbon:prepare:
  stage: pre_docker
  script:
    - echo "send automation to georchestra deploiement"
  artifacts:
    name: urbanisme-karbon-${TARGET_ENV}
    paths:
      - '$CI_PROJECT_DIR/automation/**'

urb:deploy-karbon:prepare:dev:
  extends: .urb:deploy-karbon:prepare
  only:
    refs:
      - open/develop
      - /.*karbonification.*/
  variables:
    TARGET_ENV: dev

urb:deploy-karbon:prepare:qua:
  extends: .urb:deploy-karbon:prepare
  only:
    refs:
      - open/master
      - /.*karbonification.*/
  variables:
    TARGET_ENV: dev

.urb:deploy-karbon:
  stage: deploy
  trigger:
    project: rennes-metropole/georchestra/georchestra-service-deployment
    strategy: depend
    branch: master
  variables:
    TRIGGERED_BY: urbanisme
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID

urb:deploy-karbon:dev:
  extends: .urb:deploy-karbon
  needs:
    - job: urb:deploy-karbon:prepare:dev
      artifacts: true
  only:
    refs:
      - open/develop
      - /.*karbonification.*/
  variables:
    TARGET_ENV: dev
    FORCE_POD: "true"
    PARENT_COMMIT_BRANCH: $CI_COMMIT_BRANCH
    PARENT_SERVICE_LOGIN: $SERVICE_LOGIN
    PARENT_SERVICE_TOKEN: $SERVICE_TOKEN
    PARENT_SERVICE_ACCESS_TOKEN: $SERVICE_ACCESS_TOKEN
    PARENT_PROJECT_ID: $CI_PROJECT_ID
    PARENT_STAGE_PREFIX: urb:deploy-karbon:prepare

urb:deploy-karbon:qua:
  extends: .urb:deploy-karbon
  needs:
    - job: urb:deploy-karbon:prepare:qua
      artifacts: true
  only:
    refs:
      - open/master
      - /.*karbonification.*/
  variables:
    TARGET_ENV: dev
    FORCE_POD: "true"
    PARENT_COMMIT_BRANCH: $CI_COMMIT_BRANCH
    PARENT_SERVICE_LOGIN: $SERVICE_LOGIN
    PARENT_SERVICE_TOKEN: $SERVICE_TOKEN
    PARENT_SERVICE_ACCESS_TOKEN: $SERVICE_ACCESS_TOKEN
    PARENT_PROJECT_ID: $CI_PROJECT_ID
    PARENT_STAGE_PREFIX: urb:deploy-karbon:prepare
  when: manual

trivyscan:back:
  extends:
    - .trivy-scan
  stage: docker
  variables:
    TRIVY_DOCKER_SCAN: glregistry.boost.open.global/rennes-metropole/urbanisme/addon_urbanisme/rennes-metropole:open-develop
  only:
    refs:
      - open/develop
      - /.*karbonification.*/
